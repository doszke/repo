package com.doszke.patientsapp

import com.doszke.patientsapp.model.Clinic
import com.doszke.patientsapp.model.Patient
import com.doszke.patientsapp.repository.ClinicRepository
import com.doszke.patientsapp.repository.PatientRepository
import com.doszke.patientsapp.service.PersistenceService
import org.junit.jupiter.api.Test
import org.springframework.beans.factory.annotation.Autowired
import org.springframework.boot.test.context.SpringBootTest
import org.springframework.test.annotation.Rollback
import javax.transaction.Transactional

@SpringBootTest
class PersistenceServiceTest {

    @Autowired
    private lateinit var persistenceService: PersistenceService

    @Autowired
    private lateinit var clinicRepository: ClinicRepository

    @Autowired
    private lateinit var patientRepository: PatientRepository

    @Transactional
    @Rollback
    @Test
    fun addAndRemoveClinicTest(){
        val clinic = Clinic(0L, "testing", "testing", setOf())
        val before = clinicRepository.findAll().toList()
        persistenceService.saveClinic(clinic)
        val after = clinicRepository.findAll().toList()
        assert(after.size - before.size == 1)
        val added = after.filterNot { before.contains(it) }[0] //should always be one element
        assert(added == clinic)
        assert(clinic.patients.containsAll(added.patients)) //id not tested, @GeneratedValue(AUTO) changes value to one generated by Hibernate
    }

    @Transactional
    @Rollback
    @Test
    fun addAndRemovePatientTest(){
        val patient = Patient(0L, "testing", "testing", "testing", setOf(), "tesing")
        val clinics = clinicRepository.findAll().toList()
        val idArray = clinics.filter { it.name < "g" }.map { it.id }.toTypedArray() //filtering only few clinics

        val before = patientRepository.findAll().toList()
        persistenceService.savePatient(patient, idArray)
        val after = patientRepository.findAll().toList()
        assert(after.size - before.size == 1)

        val added = after.filterNot { before.contains(it) }[0] //should always be one element - the one added
        assert(added == patient)
        added.clinics.forEach { assert(idArray.contains(it.id)) }
    }


}